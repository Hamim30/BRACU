# -*- coding: utf-8 -*-
"""Assignment_4_20301443_HamimIbnaNasim_11_CSE111.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15XXGtUzO3ebxVFon9ldjllvxZYE_NWTk

##  Task 1
"""

class Calculator:
    def __init__(self):
        print("Letâ€™s Calculate!")
        
    def add(self,first_value,second_value):
        final_result=first_value+second_value
        return final_result
    def substract(self,first_value,second_value):
        final_result=first_value-second_value
        return final_result
    def multiply(self,first_value,second_value):
        final_result=first_value*second_value
        return final_result
    def divide(self,first_value,second_value):
        final_result=first_value/second_value
        return final_result
    
object_one=Calculator()
first_value=int(input("Value 1: "))
operator=input("Operator: ")
second_value=int(input("Value 2: "))

if operator=="+":
    print(object_one.add(first_value,second_value))
elif operator=="-":
    print(object_one.substract(first_value,second_value))
elif operator=="*":
    print(object_one.multiply(first_value,second_value))
elif operator=="/":
    print(object_one.divide(first_value,second_value))

"""## Task 2"""

class Customer:
    def __init__(self,name):
        self.name =name
    def greet(self,name=None):
        if name != None:
            print("Hello {}!".format(self.name))
        else:
            print("Hello!")
    def purchase(self,*items):
        print(self.name,"you purchased",len(items),"item(s)")
        for item in items:
            print(item)
customer_1 = Customer("Sam")
customer_1.greet()
customer_1.purchase("chips", "chocolate", "orange juice")
print("-----------------------------")
customer_2 = Customer("David")
customer_2.greet("David")
customer_2.purchase("orange juice")

"""## Task 3"""

class Panda:
    def __init__(self,name,gender,age):
        self.name =name
        self.gender=gender
        self.age=age
    def sleep(self,hour=0):
        if 5>=hour>=3:
            return f"{self.name} sleeps {hour} hours daily and should have Mixed Veggies"
        elif 8>=hour>=6:
            return f"{self.name} sleeps {hour} hours daily and should have Eggplant & Tofu"
        elif 11>=hour>=9:
            return f"{self.name} sleeps {hour} hours daily and should have Broccoli Chicken"
        elif hour==0:
            return f"{self.name}'s duration is unknown thus should have only bamboo leaves"
panda1 = Panda("Kunfu","Male", 5)
panda2=Panda("Pan Pan","Female",3)
panda3=Panda("Ming Ming","Female",8)
print("{} is a {} Panda Bear who is {} years old".format(panda1.name,panda1.gender,panda1.age))
print("{} is a {} Panda Bear who is {} years old".format(panda2.name,panda2.gender,panda2.age))
print("{} is a {} Panda Bear who is {} years old".format(panda3.name,panda3.gender,panda3.age))

print(panda2.sleep(10))
print(panda1.sleep(4))
print(panda3.sleep())

"""## Task 4"""

class Cat:
    def __init__(self,color=None,action=None):
        if (color!=None) and (action != None):
            self.name   = color
            self.action = action
        elif color==None and action==None:
            self.name   = "White" 
            self.action = "sitiing"
        elif color!=None or action == None:
            self.name   = color
            self.action = "sitting"
        
    def printCat(self):
        print("{} cat is {}".format(self.name,self.action))
    def changeColor(self,color):
        self.name = color
    
c1 = Cat()
c2 = Cat("Black")
c3 = Cat("Brown", "jumping")
c4 = Cat("Red", "purring")
c1.printCat()
c2.printCat()
c3.printCat()
c4.printCat()
c1.changeColor("Blue")
c3.changeColor("Purple")
c1.printCat()
c3.printCat()

"""## Task 5"""

class Vehicle:
    def __init__(self):
        self.x=0
        self.y=0
    def print_position(self):
        result=(self.x,self.y)
        print(result)
    def moveUp(self):
        self.y += 1
    def moveDown(self):
        self.y -= 1
    def moveRight(self):
        self.x += 1
    def moveLeft(self):
        self.x -=1
car = Vehicle()
car.print_position()
car.moveUp()
car.print_position()
car.moveLeft()
car.print_position()
car.moveDown()
car.print_position()
car.moveRight()

"""## Task 6"""

class Programmer:
    def __init__(self,name,programming_language,experience):
        self.name =name
        self.programming_language=programming_language
        self.experience=experience
        print("Horray! A new programmer is born")
    def printDetails(self):
        print("Name:",self.name)
        print("Language:",self.programming_language)
        print("Experience:",self.experience,"years")
    def addExp(self,addxp):
        self.experience += addxp
        print("Updating experience of Jon Snow")
        
p1 = Programmer("Ethen Hunt", "Java", 10)
p1.printDetails()
print('--------------------------')
p2 = Programmer("James Bond", "C++", 7)
p2.printDetails()
print('--------------------------')
p3 = Programmer("Jon Snow", "Python", 4)
p3.printDetails()
p3.addExp(5)
p3.printDetails()

"""## Task 7"""

class Student:
    def __init__(self,name,id,dept="CSE"):
        self.name=name
        self.id=id
        self.dept=dept
    def dailyEffort(self,hour):
        self.hour=hour
        if hour<=2:
            self.suggestion="Suggestion: Should give more effort!"
        elif hour <=4:
            self.suggestion="Suggestion: Keep up the good work!"
        else:
            self.suggestion="Suggestion: Excellent! Now motivate others."
    def printDetails(self):
        print("Name: {}".format(self.name))
        print("ID: {}".format(self.id))
        print("Department: {}".format(self.dept))
        print("Daily Effort: {} hour(s)".format(self.hour))
        print(self.suggestion)
harry = Student('Harry Potter', 123)
harry.dailyEffort(3)
harry.printDetails()
print('========================')
john = Student("John Wick", 456, "BBA")
john.dailyEffort(2)
john.printDetails()
print('========================')
naruto = Student("Naruto Uzumaki", 777, "Ninja")
naruto.dailyEffort(6)
naruto.printDetails()

"""## Task 8"""

class Patient:
    def __init__(self,name,age):
        self.name = name
        self.age = age
    def add_Symptom(self,*symptom):
        self.symptom = symptom
    def printPatientDetail(self):
        print("Name: {}".format(self.name))
        print("Age: {}".format(self.age))
        print("Symptoms:",end="")
        symptom=""
        for symptoms in (self.symptom):
            symptom+=(symptoms+",")
        print(symptom[:-1])    
            
p1 = Patient("Thomas", 23)
p1.add_Symptom("Headache")
p2 = Patient("Carol", 20)
p2.add_Symptom("Vomiting", "Coughing")
p3 = Patient("Mike", 25)
p3.add_Symptom("Fever", "Headache", "Coughing")
print("=========================")
p1.printPatientDetail()
print("=========================")
p2.printPatientDetail()
print("=========================")
p3.printPatientDetail()
print("=========================")

"""## Task 9"""

class Avengers:
    def __init__(self,name,partner):
        self.name=name
        self.partner=partner
    def super_powers(self,*super_powers):
        self.super_powers=super_powers
    def printAvengersDetail(self):
        print("Name: {}".format(self.name))
        print("partner: {}".format(self.partner))
        print("Super Powers:",end="")
        power=""
        for powers in self.super_powers:
            power+=(powers+",")
        print(power[:-1])
         
a1 = Avengers('Captain America', 'Bucky Barnes')
a1.super_powers('Stamina', 'Slowed ageing')
a2 = Avengers('Doctor Strange', 'Ancient One')
a2.super_powers('Mastery of magic')
a3 = Avengers('Iron Man', 'War Machine')
a3.super_powers('Genius level intellect', 'Scientist ')
print("=========================")
a1.printAvengersDetail()
print("=========================")
a2.printAvengersDetail()
print("=========================")
a3.printAvengersDetail()
print("=========================")

"""## Task 10"""

class Shinobi:
    def __init__(self,name,rank):
        self.name = name
        self.rank = rank
        self.number_of_mission = 0
        self.salary=0
    def calSalary(self,number_of_mission):
        self.number_of_mission = number_of_mission
        if self.rank == 'Genin':
            salary = self.number_of_mission*50
        elif self.rank =="Chunin":
            salary = self.number_of_mission*100
        else:
            salary = self.number_of_mission*500
        self.salary=salary
    def changeRank(self,rank):
        self.rank=rank
    def printInfo(self):
        print("Name: {}".format(self.name))
        print("Rank: {}".format(self.rank))
        print("Number of mission: {}".format(self.number_of_mission))
        print("Salary: {}".format(self.salary))
        
naruto = Shinobi("Naruto", "Genin")
naruto.calSalary(5)
naruto.printInfo()
print('====================')
shikamaru = Shinobi('Shikamaru', "Genin")
shikamaru.printInfo()
shikamaru.changeRank("Chunin")
shikamaru.calSalary(10)
shikamaru.printInfo()
print('====================')
neiji = Shinobi("Neiji", "Jonin")
neiji.calSalary(5)
neiji.printInfo()

