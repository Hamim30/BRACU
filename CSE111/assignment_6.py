# -*- coding: utf-8 -*-
"""Assignment 6 CSE111.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o6MuxJmI5C7k3HP3ksFGDu9OM5rU_bLz

## Task 1
"""

class Student:
    ID=0
    def __init__(self,name,dept,age,cgpa):
        self.name=name
        self.dept=dept
        self.age=age
        self.cgpa=cgpa
        Student.ID+=1
        self.ID=Student.ID
    
    def get_details(self):
        
        print("ID:",self.ID)
        print("Name:",self.name)
        print("Department:",self.dept)
        print("Age:",self.age)
        print("CGPA:",self.cgpa)
        
    @classmethod
    def from_String(cls,info):
        information=info.split("-")
        name=information[0]
        dept=information[1]
        age=information[2]
        cgpa=information[3]
        return Student(name,dept,age,cgpa)  
s1 = Student("Samin", "CSE", 21, 3.91)
s1.get_details()
print("-----------------------")
s2 = Student("Fahim", "ECE", 21, 3.85)
s2.get_details()
print("-----------------------")
s3 = Student("Tahura", "EEE", 22, 3.01)
s3.get_details()
print("-----------------------")
s4 = Student.from_String("Sumaiya-BBA-23-3.96")
s4.get_details()
print("------------------------------")

"""## Subtask 5
Class variable is a shared variable for all the instances of a class.So , if the value of that class variable gets changed for one instances it will affect other instances as well .

## Subtask 6
We use self in instance method for reference and on the other hand we use cls in class method for reference. Instance method is for initializing variables where class method is basically for modify the instance varable as well as the class variable.When we write default constructor init with self along with the same signature under @classmethod , then the overloading classmethod init gets called(preference).

## Task 2
"""

class Dates:
    def __init__(self,date):
        self.__user_date=date
    @classmethod
    def toDashDate(cls,date_bd):
        dateFromDB=date_bd.split("/")
        date=(dateFromDB[0]+"-"+dateFromDB[1]+"-"+dateFromDB[2])
        return Dates(date)
    def getDate(self):
        return self.__user_date
date1 = Dates("05-09-2020")
dateFromDB = "05/09/2020"
date2= Dates.toDashDate(dateFromDB)
if(date1.getDate() == date2.getDate()):
    print("Equal")
else:
    print("Unequal")

"""## subtask 4
Here in the conditional statement, when we call getDate() method using date1 and date2 instance of Dates class. As a result, we get the private value of date as a string. So , as here the length of both the strings are same anf both have the same characters in same sequence ,so here "Equal" gets printed.

## Task 3
"""

class Passenger:
    count=0
    def __init__(self,name):
        self.name=name
        self.weight=0
        Passenger.count+=1
    def set_bag_weight(self,weight):
        self.weight=weight
    def printDetail(self):
        print(self.name)
        fare=450
        if self.weight<=20:
            print("Bus Fare:",fare)
        elif 21<=self.weight<=50:
            print("Bus Fare:",fare+50)
        elif self.weight>50:
            print("Bus Fare:",fare+100)
print("Total Passenger:", Passenger.count)
p1 = Passenger("Jack")
p1.set_bag_weight(90)
p2 = Passenger("Carol")
p2.set_bag_weight(10)
p3 = Passenger("Mike")
p3.set_bag_weight(25)
print("=========================")
p1.printDetail()
print("=========================")
p2.printDetail()
print("=========================")
p3.printDetail()
print("=========================")
print("Total Passenger:", Passenger.count)

"""## Task 4"""

class Travel:
    count=0
    def __init__(self,source,destination):
        self.source=source
        self.destination=destination
        self.time=1
        Travel.count+=1
    def set_source(self,source):
        self.source=source
    def set_time(self,time):
        self.time=time
    def set_destination(self,destination):
        self.destination=destination
    def display_travel_info(self):
        travel_info="Source:"+self.source+"\n"+"Destination:"+self.destination+"\n"+"Flight Time:"+str(self.time)+":00"
        return travel_info
print("No. of Traveller =", Travel.count)
print("=======================")
t1 = Travel("Dhaka","India")
print(t1.display_travel_info())
print("=======================")
t2 = Travel("Kuala Lampur","Dhaka")
t2.set_time(23)
print(t2.display_travel_info())
print("=======================")
t3 = Travel("Dhaka","New_Zealand")
t3.set_time(15)
t3.set_destination("Germany")
print(t3.display_travel_info())
print("=======================")
t4 = Travel("Dhaka","India")
t4.set_time(9)
t4.set_source("Malaysia")
t4.set_destination("Canada")
print(t4.display_travel_info())
print("=======================")
print("No. of Traveller =", Travel.count)

"""## Task 5"""

class Fruit:
    fruitCount=0
    def __init__(self,fruit,quantity):
        self.name=fruit
        self.count=quantity
        Fruit.fruitCount+=quantity
    @staticmethod
    def saySomethingGood():
        print("Fruits are good for health")
    @classmethod
    def resetcount(cls):
        Fruit.fruitCount=0
apples = Fruit("Apple", 3);
pears = Fruit("Pear", 4);
print(apples.name, apples.count)
print(pears.name,pears.count)
print("Total number of fruits", Fruit.fruitCount)
Fruit.saySomethingGood()
Fruit.resetcount()
print("Total number of fruits", Fruit.fruitCount)

"""## Task 6"""

class Cat:
    Number_of_cats=0
    def __init__(self,color,action):
        self.color=color
        self.action=action
        Cat.Number_of_cats+=1
    @classmethod
    def no_parameter(cls):
        return Cat("White",'sitting')
    @classmethod
    def first_parameter(cls,color):
        return Cat(color,'sitting')
    @classmethod
    def second_parameter(cls,action):
        return Cat("Grey",action)
    def printCat(self):
        print(self.color,"cat is",self.action)
    def changeColor(self,color):
        self.color=color
print("Total number of cats:", Cat.Number_of_cats)
c1 = Cat.no_parameter()
c2 = Cat.first_parameter("Black")
c3 = Cat("Brown", "jumping")
c4 = Cat("Red", "purring")
c5 = Cat.second_parameter("playing")
print("=======================")
c1.printCat()
c2.printCat()
c3.printCat()
c4.printCat()
c5.printCat()
c1.changeColor("Blue")
c3.changeColor("Purple")
c1.printCat()
c3.printCat()
print("=======================")
print("Total number of cats:", Cat.Number_of_cats)

"""## Task 7"""

import math
class Cylinder:
    radius=5
    height=18
    def __init__(self,radius,height):
        self.radius=radius
        self.height=height
        print("Default radius=",(Cylinder.radius),"and height=",(Cylinder.height))
        print("Updated: radius=",(self.radius),"and height=",(self.height))
        Cylinder.radius=self.radius
        Cylinder.height=self.height
    @staticmethod
    def area(radius,height):
        area=2*math.pi*(radius**2)+2*math.pi*radius*height
        print("Area:",area)
    @staticmethod
    def volume(radius,height):
        volume=math.pi*radius**2*height
        print("Volume:",volume)
    @classmethod
    def swap(cls,height,radius):
        return Cylinder(radius,height)
    @classmethod
    def changeFormat(cls,radius_height):
        changed_format=radius_height.split("-")
        return Cylinder(int(changed_format[0]),int(changed_format[1]))
c1 = Cylinder(0,0)
Cylinder.area(c1.radius,c1.height)
Cylinder.volume(c1.radius,c1.height)
print("===============================")
c2 = Cylinder.swap(8,3)
c2.area(c2.radius,c2.height)
c2.volume(c2.radius,c2.height)
print("===============================")
c3 = Cylinder.changeFormat("7-13")
c3.area(c3.radius,c3.height)
c3.volume(c3.radius,c3.height)
print("===============================")
Cylinder(0.3,5.56).area(Cylinder.radius,Cylinder.height)
print("===============================")
Cylinder(3,5).volume(Cylinder.radius,Cylinder.height)