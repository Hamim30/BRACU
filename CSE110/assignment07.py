# -*- coding: utf-8 -*-
"""20301443_HamimIbnaNasim_12_CSE110 Assignment07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kGxyGGxTf77smou2Lz-NSq9dy3MevTAt

# CSE110 Assignment 7


## Write the Python code of the following problems:
**<font color='red'>[MUST MAINTAIN VARIABLE NAMING CONVENTIONS FOR ALL THE TASKS]</font>**

### Task 1

Given a list named my_list. <br/>
my_list=[10,1,20,3,6,2,5,11,15,2,12,14,17,18,29] <br/>
Now use bubble sort to sort my_list into ascending order.

**Output**<br/>
[1, 2, 2, 3, 5, 6, 10, 11, 12, 14, 15, 17, 18, 20, 29]
"""

#todo
user_list=[10,1,20,3,6,2,5,11,15,2,12,14,17,18,29]
def bubbleSort(my_list):
    for counter in range(len(my_list)-1,0,-1):
        for index in range (counter):
            if my_list[index] > my_list[index+1]:
                my_list[index+1],my_list[index] = my_list[index],my_list[index+1]
    return(my_list)
final_result=bubbleSort(user_list)
print(final_result)

"""### Task 2

Given a list named my_list. <br/>
my_list=[10,1,20,3,6,2,5,11,15,2,12,14,17,18,29] <br/>
Now use selection sort to sort my_list into ascending order.

**Output**<br/>
[1, 2, 2, 3, 5, 6, 10, 11, 12, 14, 15, 17, 18, 20, 29]


"""

user_list=[10,1,20,3,6,2,5,11,15,2,12,14,17,18,29]

def selectionSort(my_list):
    for counter in range(len(my_list)):
        minimum = my_list[counter]
        minimum_location=counter
        for index in range(counter,len(my_list)):
            if my_list[index] < minimum:
                minimum=my_list[index]
                minimum_location=index
        temp=my_list[counter]
        my_list[counter]=minimum
        my_list[minimum_location]=temp
    return(my_list)

final_result=selectionSort(user_list)
print(final_result)

"""### Task  3

Given a list named my_list. <br/>
my_list=[10,1,20,3,6,2,5,11,15,2,12,14,17,18,29] <br/>
Now use any of the two sorts used above to sort the list in descending order.

**Output**<br/>
[29, 20, 18, 17, 15, 14, 12, 11, 10, 6, 5, 3, 2, 2, 1]

"""

#todo
my_list=[10,1,20,3,6,2,5,11,15,2,12,14,17,18,29]

def bubbleSort(my_list):
    for counter in range(len(my_list)-1,0,-1):
        for index in range (counter):
            if my_list[index] > my_list[index+1]:
                my_list[index+1],my_list[index] = my_list[index],my_list[index+1]
    return my_list
my_list=bubbleSort(my_list)

print(my_list)

"""### Task 4

Suppose you have a sitting arrangement of the students of the final exam in a list. The list contains the last two digits of their roll number.<br/>

sitting_list=[10,30,20,70,11,15,22,16,58,100,12,56,70,80] <br/>

Now you want to organize the sitting arrangement. You decided to sort all the students in the even indices into ascending order and all the students in the odd indices  into descending order.  <br/>

So write a python program that organizes the list for you the way you decided.<br/>


**Sample Output**<br/>
[10, 100, 11, 80, 12, 70, 20, 56, 22, 30, 58, 16, 70, 15]
"""

#todo
sitting_list = [10,30,20,70,11,15,22,16,58,100,12,56,70,80]
even_list=[]
odd_list=[]
for counter in range(len(sitting_list)):
    if counter % 2 == 0:
        even_list.append(sitting_list[counter])
    else:
        odd_list.append(sitting_list[counter])
        
def bubbleSort(my_list):
    for counter in range(len(my_list)-1,0,-1):
        for index in range (counter):
            if my_list[index] > my_list[index+1]:
                my_list[index+1],my_list[index] = my_list[index],my_list[index+1]
    return my_list
sorted_even_list=bubbleSort(even_list)
sorted_odd_list=bubbleSort(odd_list)

final_list=[]

for i in range (len(sorted_odd_list)):
    final_list.append(sorted_even_list[i])
    final_list.append(sorted_odd_list[-1-i])
    
    
print(final_list)

"""### Task 5

Suppose a list contains the final exam results of CSE110, PHY111, and MAT110 of each student in a listed form. Your task is to sort the list based on a course name that will be given by the user and print the names after sorting. <br/>

For example, a list looks like <br/>
Lst = [ [‘Farzad’,95,87,91] , [‘Mahjabin’,92,90,83], [‘Sadman’,87,92,80], [‘Nakhla’,85,94,90] ] <br/>
where for each list, 1st index is name, 2nd index is CSE110, 3rd index is PHY111 and 4th index is MAT110. 

**Sample Input**<br/>
MAT110

**Sample Output**<br/>
Farzad <br/>
Nakhla <br/>
Mahjabin <br/>
Sadman

**Hint:**<br/>
Nested list can be accessed by listname[firstIndex][secondIndex] like lst[0][0] will give Farzad

"""

#todo
a_list = [["Farzad",95,87,91] , ["Mahjabin",92,90,83], ["Sadman",87,92,80], ["Nakhla",85,94,90]]
user_input=input().lower()
name   =[]
cse_110=[]
phy_111=[]
mat_110=[]
#sort number in different lists
for items in (a_list):
    for counter in range(len(items)):
        if counter % 4 == 0:
            name.append(items[counter])
        elif counter % 4==1:
            cse_110.append(items[counter])
        elif counter % 4 ==2:
            phy_111.append(items[counter])
        elif counter % 4 ==3:
            mat_110.append(items[counter])
#function for sorted items
def examResult(user_input):
    subject=""
    if user_input =="cse110":
        subject = cse_110
    elif user_input =="phy111":
        subject = phy_111
    elif user_input =="mat110":
        subject = mat_110
    else:
        subject = user_input
    for counter in range(len(subject)):
        for index in range (len(subject)):
            if subject[counter]>subject[index]:
                subject[counter],subject[index] = subject[index],subject[counter]
                name[counter],name[index] = name[index],name[counter]
    return name

final_result=examResult(user_input)
for items in (final_result):
    print(items)

"""### Task 6

Suppose you have a list named my_list. Your task is to sort the list and print the count of numbers that have changed their position. <br/>
My_list = [4,2,3,1,6,5] <br/>
Sorted list would be [1,2,3,4,5,6] where 4 numbers have changed their position.


**Sample Output**<br/>
4
"""

#todo
my_list =  [4,2,3,1,6,5]
count=0

for counter in range(len(my_list)):
    minimum = my_list[counter]
    stored_value=minimum
    minimum_location=counter
    
    for index in range(counter,len(my_list)):
        if my_list[index] < minimum:
            minimum=my_list[index]
            minimum_location=index
    #swipping
    temp=my_list[counter]
    my_list[counter]=minimum
    my_list[minimum_location]=temp
    if stored_value != minimum:
        count+=2
        
print(count)

"""### Task 7

Write a python program that takes two lists from the user, sort the list, merge the two lists and find the median of the elements of the two lists.

**Sample Input 1**<br/>
list_one= [1,2,1,4] <br/>
list_two= [5,4,1]


**Sample Output 1**<br/>
Sorted list= [1, 1, 1, 2, 4, 4, 5] <br/>
Median = 2

**Sample Input 2**<br/>
list_one= [1,7,9,10] <br/>
list_two= [2,7,6,5]


**Sample Output 2**<br/>
Sorted list=[1, 2, 5, 6, 7, 7, 9, 10] <br/>
Median=6.5


"""

#todo
list_one= []
list_two= []

#input
while True:
    user_list_one=input("give inputs for list one:")
    if user_list_one=="":
        break
    else:
        list_one.append(int(user_list_one))
while True:
    user_list_two=input("give inputs for list two:")
    if user_list_two=="":
        break
    else:
        list_two.append(int(user_list_two))
        
        
sorted_list=list_one+list_two
#sorting
for counter in range(len(sorted_list)):
    minimum = sorted_list[counter]
    minimum_location=counter
    for index in range(counter,len(sorted_list)):
        if sorted_list[index] < minimum:
            minimum=sorted_list[index]
            minimum_location=index
    temp=sorted_list[counter]
    sorted_list[counter]=minimum
    sorted_list[minimum_location]=temp
    
length_of_list=len(sorted_list) 
print("Sorted List =",sorted_list)

#median
if length_of_list%2 !=0:
    final_result=sorted_list[(length_of_list)//2]
    print("Median=", final_result)
else:
    final_result=(sorted_list[(length_of_list)//2]+sorted_list[((length_of_list)//2)-1])/2
    print("Median=", final_result)

"""### Task 8


Write a python program that takes a list from user containing both positive and negative numbers. The program then finds two pairs of values whose summation is closest to zero.

**Sample Input 1**<br/>
list_one=[-10,15,2,4,-4,7,-8] 


**Sample Output 1**<br/>
Two pairs which have the smallest sum = 4 and -4


**Sample Input 2**<br/>
list_one=[1,-8,4,-7,-20,26,70,-85]


**Sample Output 2**<br/>
Two pairs which have the smallest sum = 4 and -7
"""

#todo
list_one=[]

#input
while True:
    user_list=input("give inputs for list one:")
    if user_list=="":
        break
    else:
        list_one.append(int(user_list))
        
sorted_list=list_one
#sorting
for counter in range(len(sorted_list)):
    minimum = sorted_list[counter]
    minimum_location=counter
    for index in range(counter,len(sorted_list)):
        if sorted_list[index] < minimum:
            minimum=sorted_list[index]
            minimum_location=index
    temp=sorted_list[counter]
    sorted_list[counter]=minimum
    sorted_list[minimum_location]=temp
print(sorted_list)


first_index = 0
last_index=(len(sorted_list))-1
minimum_sum = abs(sorted_list[first_index] + sorted_list[last_index]) #8
temp_one=0
temp_two=0
while first_index<last_index:
    result=sorted_list[first_index]+sorted_list[last_index] #7
    if result < minimum_sum:
        temp_one = sorted_list[first_index]
        temp_two = sorted_list[last_index]
        minimum_sum = abs(result)
    if result>0:
        last_index -= 1
    else:
        first_index += 1
print("Two pairs which have the smallest sum = ",temp_one,"and",temp_two)

